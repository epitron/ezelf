
    _            _
   | |_ ___   __| | ___  ___
   | __/ _ \ / _` |/ _ \/ __|
   | || (_) | (_| | (_) \__ \
    \__\___/ \__,_|\___/|___/


=== BUGS ===

### Problems with the program itself:

* ID3 tag not read properly (short TAGNs):
    http://elf.kicks-ass.net/stream/track/57215.mp3

* Uploads: show new directories first (by mtime?)

* Make sure all playlists have .m3u after them, for stupid browsers.
  |_ using redirects? the content-type filename header?
  |_ restify!

* ELO - Greatest Hits & Ventures - Greatest Hits have the same album name, so they get
  grouped together as Various artists. This is a problem...
  |_ Pure file-system is looking pretty good right about now!

* UTF-8 isn't coming out of the database properly.
    https://fngtps.com/projects/multibyte_for_rails/wiki/UnicodePrimer
    http://www.ruby.org.ee/wiki/Unicode_in_Ruby/Rails
    

### Problems with people's browsers/desktop software:

* Quicktime hijacks M3U's in Firefox and tries to play 'em in
  the browser.



=== Major Features ============================

  ./ Uploads Section
  * User Accounts
    |_ Checkout: http://svn.rails-engines.org/plugins/user_engine/README
  * Listening History
    |_ recent listens for every object
    |_ cached counts for album/artist/track listens
  * Activity Log
    |_ recent uploads
    |_ new users
    |_ listens
    |_ messages
  * Tag Editor (with Metadata Revisions? eg. dump ID3 blob to a table somewhere)
  * Upload Importer
  * News
  * Requests
  * Flag top-3 tracks
    |_ Album recommending:
    |   * everyone would like this
    |   * good if you're into this sort of thing
    |   * interesting new ideas
    |_ A way of saying "This is a good end-to-end album!"
  * Some kind of "Unique ID" tag in each MP3 to identify it if the DB gets corrupted
    |_ MBID
    |_ ELFID
  * Better Importer (treat DIRs as albums, inconsistent dirs are inserted into the DB, but marked as "dirty")
  * Snarfed Shoutcast Stations
  * Forums (beast integration?) or Comments
  * Covers
  * Bittorrent (Azureus, rTorrent -> http://libtorrent.rakshasa.no/wiki/RTorrentXMLRPCGuide)

=== ezElf ============================

* Spinners!

* Lighthouse boxes are pretty.. I WANT THEM:
    http://rubinius.lighthouseapp.com/projects/5089-rubinius/overview

* UI improvements:
  - [list view], [cover view]
  - hovering over CD icons shows album name
  - icon for "5-disc" chunks
  - "music" section, with tabs for albums/artists/dirs
  - re-collapse Artists
  - album/track details displays "recently listened to by..." on right
    |_ http://www.emusic.com/album/10875/10875840.html?fref=150051

* Search improvements:
  - "party ben" should find "partyben"

* Better tag reader (fast too!): http://ruby-gnome2.sourceforge.jp/hiki.cgi?Gst%3A%3ATag

* Integration with MusicBrainz.org and Audioscrobbler.net
  |_ add "mbid" to all tracks/artists/albums in the database (and id3v2 tags?)
  |_ [AS] "tags" for each track/album/artist
  |_ [MB/AS] cover art
  |_ [AS] related artists
  |_ [AS] submit tracks

* browse/artists => display albums in main list (expand only expands tracks)
  
* RESTify!
        browse/albums/ => albums/
        browse/artists/ => artists/

* Groups (polymorphic containers for albums, tracks, people, or other groups)

* "Album Artist" should come from as many fields as possible
  (TPE2, TOPE, TCOM), but the web tag-editor should pick one
  (how about the one that EasyTag prefers! :D)

* Simple helpers for doing Ajax stuff
  |_ expand_button (object, action)
  |_ collapse_button (object)

* Restfulness!
  |_ /tracks/102 => info
  |_ /tracks/102;edit => edit
  |_ /tracks/102.mp3 => stream
  |_ /tracks/102.mp3;session=a8d9fyu9823h89fh2w3f98h => authenticated stream
  |_ /albums/298 => info
  |_ /albums/298;edit => edit all tags
  |_ /albums/298.m3u => playlist
  |_ /albums/298.zip => download it

* HISTORY view
  |_ praise good tracks ( \o/ ) / scold bad tracks ( >:R )
  |_ connect together tracks that "sound good together"

* On the site, have "You are currently listening to: ..." at the top
  |_ ajax auto-refresh! :D OR, push-based javascript updates

* Custom cookies and user identification system
  * before_filter that associates a unique user with a unique key (short, like tinyurl) and looks up their account
  * /stream/track should accept the user key in the url to retrieve the session (or use IP if it's missing)
    |_ "http://<big key>@<hostname>/stream/<track id>.mp3"
    |_ add "last_ip" to User model

* Associate artists, albums, or songs by linking "what sounds good together"

* Ajaxiness (things expand!)

* Compute track length for each mp3
    MP3 Header Format:

        http://home.swipnet.se/grd/mp3info/frmheader/index.html

        This site also details a class in C, which reads the header and returns the data in more manageable variable types.

        number_of_frames = File.size / FrameLengthInBytes
        length of mp3 (seconds) = number of frames / (423/11 or 38.4545)


* Browse music by Filesystem
  * add "path[]" to Track model (split the filename)
    |_ peraps add: "dir", "dirs[]", "root", and "filename", and make "path" == dir+root+filename


=== vsftpd Config ===========================

Q) Help! Does vsftpd support virtual users?
A) Yes, via PAM integration. Set "guest_enable=YES" in /etc/vsftpd.conf. This
has the effect of mapping every non-anonymous successful login to the local
username specified in "guest_username". Then, use PAM and (e.g.) its pam_userdb
module to provide authentication against an external (i.e. non-/etc/passwd)
repository of users.
Note - currently there is a restriction that with guest_enable enabled, local
users also get mapped to guest_username.
There is an example of virtual users setup in the "EXAMPLE" directory.

Q) Help! Does vsftpd support different settings for different users?
A) Yes - in a very powerful way. Look at the setting "user_config_dir" in the
manual page.

  * Setting up PAM:
      http://lists.centos.org/pipermail/centos/2005-August/050031.html

=== Design "Inspiration" =========================

* google (blue)
      http://userstyles.org/style_screenshots/843_after.png

* ILM (blue)
      http://www.ilm.com/employment/jobs/job?job=ILM00407

* babblin5
    Great design overall! Great fonts, good colours, clear, logical, lots of relevant stuff at your fingertips, yet not overly busy looking.
      http://babblin5.com/?p=17

* filehippo
    i like the boxes
        http://filehippo.com/

* bittorrent.am
    nice curved corners, kinda kidlike feel
        http://www.bittorrent.am/torrents.php?cat=2

* archeo.graphr.net LastFM Charts
        http://archeo.graphr.net/themes/lastfm-charts.png

* Vimeo
    the stats area:
        http://www.vimeo.com/242618
    
* Digg
    the hierarchical tabs:
        http://digg.com
    
* Facebook
    intuitive navigation, with the sidebar that's handy!
        http://facebook.com
        
* ourfaves toronto
    nice clean top part, and nice tabs:
        http://toronto.ourfaves.com/people/smcleod

* Hong Family Homepage
    good tabs, really sweet CSS layout
        http://archeo.graphr.net/web/2003/hong2/
        
* Reality Prime
    dark colours rock!
        http://www.realityprime.com/articles/how-google-earth-really-works
        

=== libid3-ruby Extensions ==============

Reference: http://www.id3.org/id3v2.4.0-frames
           http://id3lib-ruby.rubyforge.org/doc/index.html

* New attributes:
        album_artist (:TPE2)
        composer (:TCOM)
        original_artist (:TOPE)


=== Tangential things ==========================

Python Paste is an awesome way of composing applications. Ruby currently
doesn't have anything like that. How difficult would it be to create
something like that for Rails?

Issues:
  * Shared things (authentication) => natively supported by framework?
