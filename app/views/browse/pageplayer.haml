!!! Strict
%html{ "xml:lang" => "en", :lang => "en", :xmlns => "http://www.w3.org/1999/xhtml" }
  %head
    %title
      SoundManager 2 Demo: Play MP3 links on a page, "page as playlist" style
    /
      for this page only, make things pretty
    %link{ :href => "/stylesheets/pp/demo.css", :rel => "stylesheet", :type => "text/css" }
    /
      player core CSS
    %link{ :href => "/stylesheets/pp/page-player.css", :rel => "stylesheet", :type => "text/css" }
    /
      optional: annotations/sub-tracks/notes, and alternate themes
    %link{ :href => "/stylesheets/pp/optional-annotations.css", :rel => "stylesheet", :type => "text/css" }
    %link{ :href => "/stylesheets/pp/optional-themes.css", :rel => "stylesheet", :type => "text/css" }
    %style{ :type => "text/css" }
      ul.playlist li .comment {font-size:0.65em;opacity:0.5}
    %script{ :src => "/javascripts/soundmanager2.js", :type => "text/javascript" }
    %script{ :type => "text/javascript" }
      \/* --------
      
      Config override: This demo uses shiny flash 9 stuff, overwriting Flash 8-based defaults
      Alternate PP_CONFIG object must be defined before page-player JS is included/executed.
      Alternately, edit the config in page-player.js to simply use the values below by default
      
      \-------- */
      
      \// demo only..
      soundManager.useHighPerformance = true; // keep flash on screen, boost performance
      soundManager.useFastPolling = true; // increased JS callback frequency
      soundManager.url = '/swf/';
      
      var PP_CONFIG = {
      flashVersion: 9,       // version of Flash to tell SoundManager to use - either 8 or 9. Flash 9 required for peak / spectrum data.
      usePeakData: true,     // [Flash 9 only] whether or not to show peak data (left/right channel values) - nor noticable on CPU
      useWaveformData: true, // [Flash 9 only] show raw waveform data - WARNING: LIKELY VERY CPU-HEAVY
      useEQData: false,      // [Flash 9 only] show EQ (frequency spectrum) data
      useFavIcon: true,      // try to apply peakData to address bar (Firefox + Opera) - performance note: appears to make Firefox 3 do some temporary, heavy disk access/swapping/garbage collection at first(?)
      useMovieStar: true     // Flash 9.0r115+ only: Support for a subset of MPEG4 formats.
      }
    %script{ :src => "/javascripts/page-player.js", :type => "text/javascript" }
    %script{ :type => "text/javascript" }
      var is_shiny = false;
      function setTheme(sTheme) {
      var o = pagePlayer.getElementsByClassName('playlist','ul');
      for (var i=o.length; i--;) {
      o[i].className = 'playlist'+(pagePlayer.cssBase?' '+pagePlayer.cssBase:'')+(sTheme?' '+sTheme:'')+(is_shiny?' shiny':'');
      }
      return false;
      }
      function setShiny(bShiny) {
      is_shiny = bShiny;
      var o = pagePlayer.getElementsByClassName('playlist','ul');
      var sClass = 'shiny';
      for (var i=o.length; i--;) {
      if (!bShiny) {
      pagePlayer.removeClass(o[i],sClass);
      } else {
      pagePlayer.addClass(o[i],sClass);
      }
      }
      }
  %body
    #left
      %h1
        %a{ :href => "http://www.schillmania.com/projects/soundmanager2/", :title => "Play a page of mp3s with javascript via SoundManager 2" }
          SoundManager 2
        \/ "Page as a playlist"
      %h2{ :style => "margin-top:0px;border:none" }
        Muxtape.com-style UI, MP3/AAC Player Example
      %p.note
        *CSS 3 border-radius supported by Firefox 2.x+, Safari (2.x?) and IE 9.
      %p{ :style => "margin-top:1.5em;color:#333" }
        This page uses shiny features which require Flash 9. The
        %a{ :href => "basic.html", :title => "Basic page player demo" }
          default config
        uses Flash 8.
      %ul.playlist
        %li
          %a{ :href => "http://elf.kicks-ass.net/stream/track/54781.mp3" }
            Esquivel
        %li
          %a{ :href => "http://elf.kicks-ass.net/stream/track/54781.mp3" }
            More Equivel!
        %li
          %a{ :href => "../_mp3/sine,%20square,%20sawtooth,%20rando.mp3" }
            440 Hz sine, square, sawtooth, pink noise, random
        %li
          %a{ :href => "../_mp3/1hz-10khz-sweep.mp3" }
            1Hz - 10KHz sweep
        /
          files from the web (note that ID3 and waveformData information will *not* load from remote domains without permission, due to Flash security restrictions)
        %li
          %a{ :href => "http://freshly-ground.com/misc/music/20060826%20-%20Armstrong.mp3" }
            20060826 - Armstrong
        %li
          %a{ :href => "http://freshly-ground.com/misc/music/carl-3-barlp.mp3" }
            Barrlping with Carl
            %span.comment
              (featureblend.com)
        %li
          %a.exclude{ :href => "http://freshly-ground.com/data/audio/binaural/Mak.mp3" }
            Angry cow sound with "exclude" CSS class
            %span.comment
              (Browser follows link normally)
      %h2
        MPEG4 / H.264 + HE-AAC (Flash "MovieStar" 9.0r115+) format support - audio-only example
      %h3
        A subset of MPEG4
        %a{ :href => "http://www.adobe.com/support/documentation/en/flashplayer/9/releasenotes.html#fixes_90115" }
          is supported
        including AAC, FLV, MP4, M4A, MOV, MP4V, 3GP and 3G2 files.
      %p
        MEPG4 video can be shown while playing these files, too. See the
        %a{ :href => "../video/", :onclick => "if (!document.domain) this.href=this.href+'index.html'" }
          video demo
        \.
    %ul.playlist
      %li
        %a{ :href => "http://freshly-ground.com/data/video/Rain%20on%20Car%20Roof.aac" }
          Rain on Car Roof
          %span.comment
            (MPEG4 .AAC audio, 128 kbps AAC-LC exported from QuickTime)
      %li
        %a{ :href => "http://freshly-ground.com/data/video/Jellyfish.mov" }
          Jellyfish
          %span.comment
            (848x480 H.264 video, playing audio portion only)
    #control-template
      /
        control markup inserted dynamically after each link
      .controls
        .statusbar
          .loading
          .position
      .timing
        #sm2_timing.timing-data
          %span.sm2_position
            \%s1
          \/
          %span.sm2_total
            \%s2
      .peak
        .peak-box
          %span.l
          %span.r
    #spectrum-container.spectrum-container
      .spectrum-box
        .spectrum
    %h3{ :style => "margin-top:1em" }
      Basics
    %p.note
      Don't want a Flash 9 requirement, EQ/waveform, perhaps less CPU? See Flash 8-based
      %a{ :href => "basic.html", :title => "Page as playlist demo" }
        basic demo
      \.
    %p
      Clicking a title will start loading + playing, or pause, a sound.
    %p
      Once loading, click (or click and drag) on the loading/position bar to seek within the sound.
    %p
      The document title reflects the currently-playing sound, and by default the list will play sequentially if left alone. (This is configurable.)
    %h3
      Themes
    %p
      Just for fun, a few color schemes (visible when playing/paused):
    %ul.themes
      %li
        %a{ :href => "#", :onclick => "return setTheme('dark')" }
          \&lt;ul class="playlist dark"&gt;
        \- #333 and #666, mostly
      %li
        %a{ :href => "#", :onclick => "return setTheme('gold')" }
          \&lt;ul class="playlist gold"&gt;
        \- Frontin' the bling
      %li
        %a{ :href => "#", :onclick => "return setTheme('bubblegum')" }
          \&lt;ul class="playlist bubblegum"&gt;
        \- ZOMG PONIES!!!ONEONEONE
      %li
        %a{ :href => "#", :onclick => "return setTheme('')" }
          \&lt;ul class="playlist"&gt;
        (default)
    %form{ :onsubmit => "return false", :action => "#", :style => "margin:0px;padding:0px" }
      %div
        %input#makeShiny{ :name => "makeShiny", :type => "checkbox", :onchange => "setShiny(this.checked)", :value => "Shiny" }
        %label{ :for => "makeShiny" }
          Also add "shiny", eg. &lt;ul class="shiny playlist"&gt;...
    %script{ :type => "text/javascript" }
      document.getElementById('makeShiny').checked=false;
    %h2#metadata
      Experimental (Alpha) Variant: MP3 "Metadata": Annotations / notes / sub-tracks
    %p
      A potential approach to noting interesting moments in sounds, scene changes, new tracks in seamless DJ mixes etc. Keep in mind this is a single MP3 being loaded, but annotations are placed along the timeline as shown.
    %p
      A "metadata" element contains a nested list of data (UL/LI combination) - in this case, a summary of each scene - and the time at which this item occurs/begins. In order to help with positioning, the total length of the sound is also specified up-front. View the source code of this page for the details.
    %ul.playlist
      %li
        %a{ :href => "http://freshly-ground.com/data/audio/binaural/A%20Virtual%20Haircut%20in%20San%20Francisco%20%283%20Scenes%29.mp3" }
          A Virtual Haircut (3 scenes)
        .metadata
          .duration
            4:43
          /
            total track time (for positioning while loading, until determined
          %ul
            %li
              %p
                Electric razor
              %span
                0:00
            /
              first scene
            %li
              %p
                Water, scissors
              %span
                2:41
            /
              start time of second scene
            %li
              %p
                More razor work
              %span
                4:00
      %li
        %a{ :href => "http://freshly-ground.com/data/audio/binaural/Rubber%20Chicken%20Launch%20%28office%29.mp3" }
          Rubber Chicken Launch (Office)
        .metadata
          .duration
            0:47
          %ul
            %li
              %p
                First attempt
              %span
                0:00
            %li
              %p
                Fire!
              %span
                0:02
            %li
              %p
                "Too much angle"
              %span
                0:05
            %li
              %p
                Random chicken noise
              %span
                0:18
            %li
              %p
                "Wait a second"
              %span
                0:31
            %li
              %p
                Derrr..
              %span
                0:34
            %li
              %p
                Launch attempt #2
              %span
                0:36
            %li
              %p
                "Wrong angle"
              %span
                0:39
            %li
              %p
                "Fail"
              %span
                0:42
    %h2
      How It Works
    %p
      This example uses
      %a{ :href => "http://www.schillmania.com/projects/soundmanager2/", :title => "SoundManager 2 Javascript Sound API" }
        SoundManager 2
      to find links to MP3 files within an unordered list, and makes them playable "in-place" on a page. The script assigns CSS classes to links' parent LI nodes to indicate their state (playing/paused, etc.)
    %h3
      Progressive Enhancement
    %p
      This provides a nice HTML base for all browsers and user agents, and enhances progressively for those with Javascript and Flash. Links pointing to MP3s are assigned an onclick handler which intercepts the click (preventing the browser from following the link and unloading the page. SM2 will then create sound objects as needed to play the MP3s. In the event there is an error at runtime or a lack of support (no JS/Flash etc.), the browser will simply load the MP3s directly as it normally would. This includes iPhones, etc.
    %h3
      HTML Fragments (UI Element Templates)
    %p
      Each item in the playlist has its own set of controls and progress indicators, etc. This content is defined once as a hidden template of HTML in-page separate from the playlist markup and is cloned for each item as needed. This can be easily styled with CSS as well, of course.
    %h2
      I'd like to use this.
    %p
      See this
      %a{ :href => "basic.html", :title => "Page as playlist demo" }
        basic demo
      for reference.
    %p
      The basic demo uses the default Flash 8 configuration, but you can easily change this to use Flash 9 features. The only difference in code is the configuration.
    %p
      A reminder that if loading from the local filesystem, Flash will deny access to remote (network/internet) URLs by default unless whitelisted via the
      %a{ :href => "http://www.macromedia.com/support/documentation/en/flashplayer/help/settings_manager04.html" }
        Flash Player Global Security Settings Page
      \. Some URLs in this example are remote to demonstrate this.
    %h2
      Configuration + Options
    %h3
      Default configuration
    %p
      Behaviours such as auto-start and UI elements like VU meters and spectrum graphs are easy configurable, using an object literal format as shown below.
    %p
      The page player config (see related page-player.js file) as below.
    %p
      The custom parameters used to make this demo page are highlighted in red.
    %pre.block
      %code
        %span
          \// ( within page-player.js )
        this.config = {
        flashVersion:
        %span{ :style => "color:red" }
          9
        ,
        %span
          \// version of Flash to tell SoundManager to use - either 8 or 9.
        usePeakData:
        %span{ :style => "color:red" }
          true
        ,
        %span
          \// [Flash 9 only] show peak (VU-meter) data
        useFavIcon:
        %span{ :style => "color:red" }
          true
        ,
        %span
          \// try to show peakData in address bar (Firefox + Opera) - requires usePeakData = true too, of course.
        useWaveformData:
        %span{ :style => "color:red" }
          true
        ,
        %span
          \// [Flash 9 only] true: show raw waveform data - WARNING: CPU-intensive
        useEQData: false,
        %span
          \// [Flash 9 only] show EQ (frequency spectrum) data - WARNING: CPU-intensive
        fillGraph: false,
        %span
          \// [Flash 9 only] draw full lines instead of only top (peak) spectrum points
        allowRightClick:true,
        %span
          \// let users right-click MP3 links ("save as...", etc.) or discourage (can't prevent.)
        useThrottling: false,
        %span
          \// try to rate-limit potentially-expensive calls (eg. dragging position around)
        autoStart: false,
        %span
          \// begin playing first sound when page loads
        playNext: true,
        %span
          \// stop after one sound, or play through list until end
        updatePageTitle: true,
        %span
          \// change the page title while playing sounds
        emptyTime: '-:--'
        %span
          \// null/undefined timer values (before data is available)
        }
    %h3
      Per-page configuration override
    %p
      Alternately, you may override the defaults on a per-page basis by defining an "alternate configuration" object
      %b
        before
      the page-player.js file has been included in your source code:
    %pre.block
      %code
        %span
          \// ( before page-player.js )
        var PP_CONFIG = {
        flashVersion: 9,
        %span
          \// version of Flash to tell SoundManager to use - either 8 or 9. Flash 9 required for peak / spectrum data.
        usePeakData: true,
        %span
          \// [Flash 9 only] whether or not to show peak data (no notable CPU cost)
        useWaveformData: true
        %span
          \// [Flash 9 only] show raw waveform data. WARNING: Experimental, likely CPU-heavy
        }
    %p
      Any options specified in PP_CONFIG will override the defaults defined in page-player.js.
    %h3
      Basic CSS
    %pre
      If you want to make your own UI from scratch, here is the base:
      
      ul.playlist {}
      
      Default + hover state, "click to play":
      
      li.sm2_link {}
      li.sm2_link:hover {}
      
      Playing + hover state, "click to pause":
      
      li.sm2_playing {}
      li.sm2_playing:hover {}
      
      Paused + hover state, "click to resume":
      
      li.sm2_paused {}
      li.sm2_paused:hover {}
    %p
      The positioning (load status / control bar) template is also applied after each MP3 link, from an element named "control-template"
    %p
      "loading" and "position" have background colors applied, and have their width adjusted dynamically by SM2 as the sound(s) load/play. "timing" is replaced with the current time / duration, eg. 1:23 / 4:20
    %p
      The class names applied can be edited within the source JS also, for convenience.
    %p
      The controls are shown and hidden via the same dynamic CSS updates. See the source CSS for the timing / status bar layout.
    %h2
      Performance Considerations
    %h3
      Experimental Flash 9 features
    %ul.tight{ :style => "padding-top:1px" }
      %li
        %h4
          Dynamic "favicon" VU meter
        %p
          The VU meter "favicon" option as shown in the address/location bar for Firefox and Opera can cause a lot of disk access in Firefox (2.x/3.0 at time of writing, from what has been reported.) It may be garbage collection-related.
        %p
          The behaviour seems to be connected to the dynamic swapping of &lt;link&gt; elements with data: URIs containing the VU meter data, and looks to be noticeable with the first sound played - after which point things settle down. Perhaps the browser is attempting to cache the favicon data being assigned.
      %li
        %h4
          Waveform/spectrum visualization graph
        %p
          Enabling the waveformData and/or eqData features will result in some heavy DOM calls (manipulation of 256 &lt;div&gt; elements with each "frame" drawn) which can eat up a good amount of CPU and may make really old computers cower in fear.
        %p
          Ultimately, the UI refresh rate will simply be limited if a CPU ceiling is hit, and audio playback should not be affected.
    %h3
      More CSS comments
    %div
      %pre
        SoundManager 2: "page as playlist" example
        \------------------------------------------
        
        Clicks on links to MP3s are intercepted via JS, calls are
        made to SoundManager to load/play sounds. CSS classes are
        appended to the LI parent, which are used to highlight the
        current play state and so on.
        
        Class names are applied in addition to "sm2_link" base.
        
        Default:
        
        sm2_link
        
        Additional states:
        
        sm2_playing
        sm2_paused
        
        eg.
        
        \&lt;!-- default --&gt;
        \&lt;li class="sm2_link"&gt;&lt;a href="some.mp3"&gt;some.mp3&lt;/a&gt;&lt;/li&gt;
        
        \&lt;!-- playing --&gt;
        \&lt;li class="sm2_link sm2_playing"&gt;&lt;a href="some.mp3"&gt;some.mp3&lt;/a&gt;&lt;/li&gt;
        
        The script also injects an HTML template containing control bar
        and timing elements, which can also be targeted with CSS.
        
        
        Note you don't necessarily require ul.playlist for your use
        if only using one style on a page. You can just use .sm2_link
        and so on, but isolate the CSS you want.
        
        Side note: Would do multiple class definitions eg.
        
        li.sm2_default.sm2_playing{}
        
        \.. except IE 6 has a parsing bug which may break behaviour,
        applying sm2_playing {} even when the class is set to sm2_default.
        
        
        If you want to make your own UI from scratch, here is the base:
        
        Default + hover state, "click to play":
        
        li.sm2_link {}
        li.sm2_link:hover {}
        
        Playing + hover state, "click to pause":
        
        li.sm2_playing {}
        li.sm2_playing:hover {}
        
        Paused + hover state, "click to resume":
        
        li.sm2_paused {}
        li.sm2_paused:hover {}
    %p
      %a{ :href => "http://www.schillmania.com/projects/soundmanager2/", :title => "Javascript MP3 sound player API" }
        SoundManager 2 project home
